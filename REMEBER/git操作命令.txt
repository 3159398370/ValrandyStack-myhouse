# 初始化 Git 仓库（生成隐藏的 .git 文件夹）[1,3](@ref)
git init

# 创建空文件（需指定文件名，例如 file01）[6,7](@ref)
touch file01

# 查看工作区与暂存区文件状态（显示未跟踪/已修改/已暂存文件）[9,10](@ref)
git status

git add.

# 提交暂存区内容到本地仓库（需附带清晰的提交信息）[13,14](@ref)
git commit -m "add file01"

# 单行显示完整提交历史（修正双等号为单等号）[15,16](@ref)
git log --pretty=oneline --abbrev-commit

# 图形化显示所有分支提交历史（含分支合并路径）[17,18](@ref)
git log --pretty=oneline --abbrev-commit --all --graph
 
# 错误命令（正确应为 git log）[15](@ref)
git -log

#版本回退
git reset -hard commitID

git reflog

#排除文件
 touch .gitignore


#查看本地分支

git branch

# 查看当前分支
git branch --show-current


#创建本地分支

git branch 分支名

#切换分支

git checkout xxx

git add .

#
git checkout "分支"

#合并分支

git merge xxxx
#删除分支
git branch -d xxx

#推送仓库
git init

git remote add origin xxx

#检查远程仓库
git remote -v

git push origin master

git push -u origin master:main


git push--set-upstream origin master


#克隆
git clone xx

#拉取
git fetch
git pull

# 1. 强制重置到目标版本（工作区和暂存区完全覆盖）
git reset --hard 9f02038e

# 2. 强制推送到远程仓库（覆盖历史）
git push -f origin <分支名>  # 如 git push -f origin main
 -i https://pypi.tuna.tsinghua.edu.cn/simple

# 删除远程分支
git push origin --delete master

# 推送gitee
git push -f gitee main:main

# 拉取服务器文件
git fetch
git pull

# 重新加载配置
sudo nginx -s reload

# 停止nginx
sudo nginx -s stop

# 启动nginx
sudo nginx

# 测试配置文件
sudo nginx -t

sudo systemctl restart nginx

sudo systemctl status nginx


cd frontend
npm install
npm run dev


# 创建并切换到新分支
git checkout -b main-stable

# 推送分支到远程并设置上游
git push -u origin main-stable

将远程的 main-stable 分支合并到当前的 main 分支
git merge origin/main-stable